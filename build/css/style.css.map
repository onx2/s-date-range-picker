{
  "version": 3,
  "file": "style.css",
  "sources": [
    "../../src/date-range-picker/SDateRangePicker.svelte",
    "../../src/date-range-picker/components/Calendar.svelte",
    "../../src/date-range-picker/components/TimePicker.svelte",
    "../../src/date-range-picker/components/Week.svelte",
    "../../src/date-range-picker/components/DaysOfWeek.svelte",
    "../../src/date-range-picker/components/Controls.svelte",
    "../../src/date-range-picker/components/Day.svelte"
  ],
  "sourcesContent": [
    "<script>\n  /**\n   * @todo Question: Can this component be divided up into separate components?\n   * And if so, should it be?\n   *\n   * Potential splitting: single vs range, slim vs full (could remove a significant amount of constality)\n   *\n   * The TimePicker component could potentially be split out into a separate package that is imported.\n   * If it were themeable, it may be easier / make more sense to split it out.\n   */\n  import { createEventDispatcher, onMount } from \"svelte\";\n  import {\n    addMonths,\n    addYears,\n    subYears,\n    differenceInCalendarMonths,\n    endOfWeek,\n    format,\n    isAfter,\n    isBefore,\n    isSameMinute,\n    isSameSecond,\n    isSameDay,\n    isSameMonth,\n    startOfWeek,\n    subMonths\n  } from \"date-fns\";\n  import { roundDown, localeFormat } from \"./utils\";\n  import Calendar from \"./components/Calendar.svelte\";\n  import TimePicker from \"./components/TimePicker.svelte\";\n\n  export let autoApply = false;\n  export let dateFormat = \"MMM dd, yyyy\";\n  export let monthIndicator = true;\n  export let disabledDates = [];\n  export let endDate = endOfWeek(new Date());\n  export let events = [];\n  export let firstDayOfWeek = \"sunday\";\n  export let isoWeekNumbers = false;\n  export let locale;\n  export let maxDate = addYears(new Date(), 10);\n  export let minDate = subYears(new Date(), 10);\n  export let monthDropdown = false;\n  export let monthFormat = \"MMMM\";\n  export let numPages = 1;\n  export let rtl = false;\n  export let singlePicker = false;\n  export let startDate = startOfWeek(new Date());\n  export let timePicker = false;\n  export let timePicker24Hour = true;\n  export let minuteIncrement = 1;\n  export let secondIncrement = 1;\n  export let timePickerSeconds = false;\n  export let prevIcon = \"&#9666;\";\n  export let nextIcon = \"&#9656;\";\n  export let today = new Date();\n  export let weekGuides = false;\n  export let weekNumbers = false;\n  export let yearDropdown = false;\n  export let applyBtnText = \"Apply\";\n  export let cancelBtnText = \"Cancel\";\n  export let todayBtnText = \"Today\";\n  export let todayBtn = false;\n  export let resetViewBtnText = \"&#8602;\";\n  export let resetViewBtn = false;\n  export let id = `s-date-range-picker-${Math.random()}`;\n  // export let disabled = false;\n  // export let hideOnCancel = true;\n  // export let hideOnApply = true;\n  // export let maxSpan = null;\n  // export let predefinedRanges = [];\n\n  let hoverDate = endDate;\n  let tempEndDate = endDate;\n  let tempStartDate = startDate;\n  let hasSelection = true;\n\n  const dispatchEvent = createEventDispatcher();\n  const cellWidth = 44;\n  const maxCalsPerPage = 2;\n  const pageWidth = cellWidth * 7;\n  const pageWidthWithPadding = pageWidth + 96;\n\n  // Used for the date-fns format abstraction, localeFormat\n  /** @todo This might be better placed into a store. */\n  window.__locale__ = locale;\n\n  $: canApply = () => {\n    if (!hasSelection) {\n      return false;\n    }\n\n    if (timePicker) {\n      if (timePickerSeconds) {\n        return (\n          !isSameSecond(tempStartDate, startDate) ||\n          !isSameSecond(tempEndDate, endDate)\n        );\n      }\n\n      return (\n        !isSameMinute(tempStartDate, startDate) ||\n        !isSameMinute(tempEndDate, endDate)\n      );\n    }\n\n    return (\n      !isSameDay(tempStartDate, startDate) || !isSameDay(tempEndDate, endDate)\n    );\n  };\n\n  $: canResetView = !isSameMonth(tempStartDate, months[0]) && tempEndDate;\n  $: maxWidth =\n    pickerWidth >= maxCalsPerPage * pageWidth\n      ? maxCalsPerPage * pageWidthWithPadding\n      : pickerWidth;\n  $: months = [...Array(numPages)].map((_, i) => addMonths(today, i));\n  $: pickerWidth = numPages * pageWidthWithPadding;\n  $: startDateReadout = () => {\n    if (!hasSelection && isBefore(hoverDate, tempStartDate)) {\n      return localeFormat(hoverDate, dateFormat);\n    }\n\n    return localeFormat(tempStartDate, dateFormat);\n  };\n  $: endDateReadout = () => {\n    if (!hasSelection) {\n      if (isBefore(hoverDate, tempStartDate)) {\n        return localeFormat(tempStartDate, dateFormat);\n      }\n\n      return localeFormat(hoverDate, dateFormat);\n    }\n\n    return localeFormat(tempEndDate, dateFormat);\n  };\n\n  // Round and set the hover data temp start & end dates based on start & end date props\n  onMount(() => {\n    if (timePicker) {\n      tempStartDate = new Date(\n        startDate.getFullYear(),\n        startDate.getMonth(),\n        startDate.getDate(),\n        startDate.getHours(),\n        roundDown(startDate.getMinutes(), minuteIncrement),\n        roundDown(startDate.getSeconds(), secondIncrement)\n      );\n\n      tempEndDate = hoverDate = new Date(\n        endDate.getFullYear(),\n        endDate.getMonth(),\n        endDate.getDate(),\n        endDate.getHours(),\n        roundDown(endDate.getMinutes(), minuteIncrement),\n        roundDown(endDate.getSeconds(), secondIncrement)\n      );\n    }\n  });\n\n  // const show() =>{\n  //   dispatchEvent(\"show\");\n  // }\n\n  // const hide() =>{\n  //   dispatchEvent(\"hide\");\n  // }\n\n  const apply = () => {\n    if (!canApply()) {\n      return;\n    }\n    // if (hideOnApply) {\n    //   hide();\n    // }\n\n    dispatchEvent(\"apply\", {\n      startDate: tempStartDate,\n      endDate: tempEndDate\n    });\n  };\n\n  const goToToday = () => {\n    months = [...Array(numPages)].map((_, i) => addMonths(new Date(), i));\n  };\n\n  const resetView = () => {\n    const resetViewMonth = canApply() ? tempStartDate : startDate;\n    months = [...Array(numPages)].map((_, i) => addMonths(resetViewMonth, i));\n  };\n\n  const resetState = () => {\n    tempStartDate = startDate;\n    tempEndDate = endDate;\n    hasSelection = true;\n  };\n\n  const close = () => {\n    resetState();\n    resetView();\n    // hide();\n  };\n\n  const cancel = () => {\n    resetState();\n    resetView();\n\n    // if (hideOnCancel) {\n    //   hide();\n    // }\n\n    dispatchEvent(\"cancel\", {\n      startDate,\n      endDate\n    });\n  };\n\n  const onSelection = ({ detail }) => {\n    const newEndDate = new Date(\n      detail.getFullYear(),\n      detail.getMonth(),\n      detail.getDate(),\n      tempEndDate.getHours(),\n      tempEndDate.getMinutes(),\n      tempEndDate.getSeconds()\n    );\n\n    if (singlePicker) {\n      // Start and end dates are always the same on singlePicker\n      tempStartDate = tempEndDate = newEndDate;\n    } else if (hasSelection) {\n      // In range mode, if there is currently a selection and the selection\n      // event is fired the user must be selecting the start date\n      tempStartDate = new Date(\n        detail.getFullYear(),\n        detail.getMonth(),\n        detail.getDate(),\n        tempStartDate.getHours(),\n        tempStartDate.getMinutes(),\n        tempStartDate.getSeconds()\n      );\n      hasSelection = false;\n    } else {\n      // In range mode, if there isn't a selection, the user must be selecting an end date\n      // Sorting - Swap start and end dates when the end date is before the start date\n      if (isBefore(newEndDate, tempStartDate)) {\n        tempEndDate = tempStartDate;\n        tempStartDate = !timePicker ? startOfDay(newEndDate) : newEndDate;\n      } else {\n        tempEndDate = newEndDate;\n      }\n\n      hasSelection = true;\n\n      dispatchEvent(\"selection\", {\n        startDate: tempStartDate,\n        endDate: tempEndDate\n      });\n\n      if (autoApply) {\n        apply();\n      }\n    }\n  };\n\n  const onHover = ({ detail }) => {\n    hoverDate = detail;\n  };\n\n  const onPrevMonth = () => {\n    months = months.map(mo => subMonths(mo, 1));\n  };\n\n  const onNextMonth = () => {\n    months = months.map(mo => addMonths(mo, 1));\n  };\n\n  const onPageChange = ({ detail: { incrementAmount } }) => {\n    if (incrementAmount > 0) {\n      months = months.map(mo => addMonths(mo, incrementAmount));\n    } else {\n      const absIncrementAmount = Math.abs(incrementAmount);\n      months = months.map(mo => subMonths(mo, absIncrementAmount));\n    }\n  };\n\n  const onStartTimeChange = ({ detail }) => {\n    const newDate = new Date(\n      tempStartDate.getFullYear(),\n      tempStartDate.getMonth(),\n      tempStartDate.getDate(),\n      detail.hours,\n      detail.minutes,\n      detail.seconds\n    );\n\n    if (isAfter(newDate, tempEndDate)) {\n      tempStartDate = tempEndDate;\n      tempEndDate = newDate;\n    } else {\n      tempStartDate = newDate;\n    }\n  };\n\n  const onEndTimeChange = ({ detail }) => {\n    const newDate = new Date(\n      tempEndDate.getFullYear(),\n      tempEndDate.getMonth(),\n      tempEndDate.getDate(),\n      detail.hours,\n      detail.minutes,\n      detail.seconds\n    );\n\n    if (isBefore(newDate, tempStartDate)) {\n      tempEndDate = tempStartDate;\n      tempStartDate = newDate;\n    } else {\n      tempEndDate = newDate;\n    }\n  };\n</script>\n\n<style>\n  .s-date-range-picker {\n    font-size: 18px;\n    margin: 2em;\n    background-color: #fff;\n    border: 1px solid #d5d5d5;\n    border-radius: 6px;\n    padding: 0.6em;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n      Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  }\n\n  .s-date-range-picker :global(.space-between) {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  .s-date-range-picker :global(.row) {\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 100%;\n  }\n\n  .s-date-range-picker :global(.calendar-cell) {\n    width: 44px;\n    height: 44px;\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n\n  .s-date-range-picker :global(.form-field) {\n    padding: 8px 12px;\n    background-color: transparent;\n    border-radius: 4px;\n    border: 1px solid #d5d5d5;\n    margin: 1px;\n    cursor: pointer;\n  }\n\n  .s-date-range-picker :global(button) {\n    cursor: pointer;\n    user-select: none;\n  }\n\n  .s-date-range-picker :global(button:disabled) {\n    cursor: not-allowed;\n  }\n\n  h1 {\n    font-size: 20px;\n    margin: 0;\n  }\n\n  .grid {\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n  }\n\n  .rtl {\n    direction: rtl;\n  }\n\n  .justify-end {\n    justify-content: flex-end;\n    display: flex;\n  }\n</style>\n\n<form\n  on:submit|preventDefault={apply}\n  {id}\n  style={`width: ${maxWidth}px`}\n  class={rtl ? 'rtl s-date-range-picker' : 's-date-range-picker'}>\n  <div class=\"space-between\">\n    <h1>{startDateReadout()} to {endDateReadout()}</h1>\n    <button\n      class=\"form-field\"\n      type=\"close\"\n      disabled={!canApply()}\n      on:click={close}>\n      x\n    </button>\n  </div>\n  <div>\n    <div class=\"grid\">\n      {#each months as month}\n        <Calendar\n          on:pageChange={onPageChange}\n          on:hover={onHover}\n          on:selection={onSelection}\n          on:prevMonth={onPrevMonth}\n          on:nextMonth={onNextMonth}\n          on:apply={apply}\n          {prevIcon}\n          {nextIcon}\n          {disabledDates}\n          {events}\n          {hoverDate}\n          {hasSelection}\n          {firstDayOfWeek}\n          {isoWeekNumbers}\n          {maxDate}\n          {minDate}\n          {month}\n          {monthDropdown}\n          {monthFormat}\n          {monthIndicator}\n          {pageWidth}\n          {rtl}\n          {singlePicker}\n          {tempEndDate}\n          {tempStartDate}\n          {today}\n          {weekGuides}\n          {weekNumbers}\n          {yearDropdown} />\n      {/each}\n    </div>\n    <div class=\"full-height-scroll\" />\n  </div>\n\n  {#if timePicker}\n    <div class=\"row\">\n\n      <TimePicker\n        on:timeChange={onStartTimeChange}\n        dateReference={tempStartDate}\n        {minuteIncrement}\n        {secondIncrement}\n        {timePicker24Hour}\n        {timePickerSeconds} />\n\n      {#if !singlePicker}\n        <TimePicker\n          on:timeChange={onEndTimeChange}\n          dateReference={tempEndDate}\n          {minuteIncrement}\n          {secondIncrement}\n          {timePicker24Hour}\n          {timePickerSeconds} />\n      {/if}\n    </div>\n  {/if}\n  <div class=\"justify-end\">\n    {#if todayBtn}\n      <button\n        class=\"form-field\"\n        type=\"button\"\n        aria-label=\"Show the current selection \"\n        on:click={goToToday}\n        disabled={isSameMonth(new Date(), months[0])}>\n        {todayBtnText}\n      </button>\n    {/if}\n    {#if resetViewBtn}\n      <button\n        class=\"form-field\"\n        type=\"button\"\n        aria-label=\"Show the current selection \"\n        on:click={resetView}\n        disabled={!canResetView}>\n        {@html resetViewBtnText}\n      </button>\n    {/if}\n    <button\n      class=\"form-field\"\n      type=\"button\"\n      aria-label=\"Cancel the current selection and revert to previous start and\n      end dates\"\n      on:click={cancel}\n      aria-disabled={!canApply()}\n      disabled={!canApply()}>\n      {cancelBtnText}\n    </button>\n\n    <button\n      id=\"s-apply-btn\"\n      class=\"form-field\"\n      aria-label=\"Apply the current selection\"\n      on:click={apply}\n      aria-disabled={!canApply()}\n      disabled={!canApply()}>\n      {applyBtnText}\n    </button>\n  </div>\n</form>\n",
    "<script>\n  import Week from \"./Week.svelte\";\n  import DaysOfWeek from \"./DaysOfWeek.svelte\";\n  import Controls from \"./Controls.svelte\";\n  import { getCalendarWeeks, dayOffset } from \"../utils\";\n\n  export let disabledDates;\n  export let events;\n  export let hasSelection;\n  export let hoverDate;\n  export let firstDayOfWeek;\n  export let isoWeekNumbers;\n  export let maxDate;\n  export let minDate;\n  export let month;\n  export let monthDropdown;\n  export let monthFormat;\n  export let monthIndicator;\n  export let pageWidth;\n  export let rtl;\n  export let prevIcon;\n  export let nextIcon;\n  export let singlePicker;\n  export let tempEndDate;\n  export let tempStartDate;\n  export let today;\n  export let weekGuides;\n  export let weekNumbers;\n  export let yearDropdown;\n\n  $: weeks = getCalendarWeeks({\n    month,\n    firstDayOfWeek,\n    events,\n    disabledDates,\n    tempStartDate,\n    hoverDate,\n    hasSelection,\n    minDate,\n    maxDate,\n    today,\n    tempEndDate,\n    singlePicker\n  });\n</script>\n\n<style>\n  .calendar {\n    padding: 6px 48px 0 48px;\n    user-select: none;\n  }\n</style>\n\n<div style={`width: ${pageWidth}px;`} class=\"calendar\">\n  <Controls\n    on:pageChange\n    on:prevMonth\n    on:nextMonth\n    {prevIcon}\n    {nextIcon}\n    {month}\n    {monthDropdown}\n    {monthFormat}\n    {maxDate}\n    {minDate}\n    {yearDropdown} />\n  <div role=\"grid\">\n    <DaysOfWeek {firstDayOfWeek} />\n    {#each weeks as week}\n      <Week\n        on:selection\n        on:hover\n        on:apply\n        {week}\n        {month}\n        {monthIndicator}\n        {rtl}\n        {weekGuides}\n        {weekNumbers}\n        {isoWeekNumbers} />\n    {/each}\n  </div>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import { isSameSecond, startOfDay, endOfDay } from \"date-fns\";\n  import { pad, roundDown } from \"../utils\";\n\n  export let minuteIncrement;\n  export let secondIncrement;\n  export let timePicker24Hour;\n  export let timePickerSeconds;\n  export let dateReference;\n\n  const dispatchEvent = createEventDispatcher();\n\n  $: selectedHour = dateReference.getHours();\n  $: selectedMinute = dateReference.getMinutes();\n  $: selectedSecond = dateReference.getSeconds();\n\n  $: hours = [...Array(timePicker24Hour ? 24 : 12)].map((_, i) => pad(i));\n  $: minutes = [...Array(60 / minuteIncrement)].map((_, i) =>\n    pad(i * minuteIncrement)\n  );\n  $: seconds = [...Array(60 / secondIncrement)].map((_, i) =>\n    pad(i * secondIncrement)\n  );\n\n  /** @todo Handle am/pm times */\n  const timeChange = () =>\n    dispatchEvent(\"timeChange\", {\n      hours: selectedHour,\n      minutes: selectedMinute,\n      seconds: timePickerSeconds ? selectedSecond : 0\n    });\n\n  $: isFirstAvailableTime = isSameSecond(\n    dateReference,\n    startOfDay(dateReference)\n  );\n  $: isLastAvailableTime = isSameSecond(dateReference, endOfDay(dateReference));\n\n  const timeChangeStartOfDay = () => {\n    selectedHour = hours[0];\n    selectedMinute = minutes[0];\n    selectedSecond = seconds[0];\n\n    timeChange();\n  };\n\n  function timeChangeEndOfDay() {\n    selectedHour = hours[hours.length - 1];\n    selectedMinute = minutes[minutes.length - 1];\n    selectedSecond = seconds[seconds.length - 1];\n\n    timeChange();\n  }\n</script>\n\n<style>\n  div {\n    padding: 6px 0 12px 0;\n    flex: 1;\n    justify-content: center;\n    display: flex;\n  }\n</style>\n\n<div>\n  <button\n    aria-label=\"First available time\"\n    type=\"button\"\n    class=\"form-field\"\n    disabled={isFirstAvailableTime}\n    aria-disabled={isFirstAvailableTime}\n    on:click={timeChangeStartOfDay}>\n    {@html '&#8643;'}\n  </button>\n  <select class=\"form-field\" bind:value={selectedHour} on:change={timeChange}>\n    {#each hours as hour}\n      <option value={parseInt(hour)}>{hour}</option>\n    {/each}\n  </select>\n  <select class=\"form-field\" bind:value={selectedMinute} on:change={timeChange}>\n    {#each minutes as minute}\n      <option value={parseInt(minute)}>{minute}</option>\n    {/each}\n  </select>\n  {#if timePickerSeconds}\n    <select\n      class=\"form-field\"\n      bind:value={selectedSecond}\n      on:change={timeChange}>\n      {#each seconds as second}\n        <option value={parseInt(second)}>{second}</option>\n      {/each}\n    </select>\n  {/if}\n\n  <!-- {#if !timePicker24Hour}\n    <select class=\"form-field\">\n      <option value=\"AM\">AM</option>\n      <option value=\"PM\">PM</option>\n    </select>\n  {/if} -->\n\n  <button\n    aria-label=\"Last available time\"\n    type=\"button\"\n    class=\"form-field\"\n    disabled={isLastAvailableTime}\n    aria-disabled={isLastAvailableTime}\n    on:click={timeChangeEndOfDay}>\n    {@html '&#8638;'}\n  </button>\n</div>\n",
    "<script>\n  import { isBefore, format } from \"date-fns\";\n  import Day from \"./Day.svelte\";\n  import { localeFormat } from \"../utils\";\n\n  export let isoWeekNumbers;\n  export let month;\n  export let monthIndicator;\n  export let rtl;\n  export let week;\n  export let weekGuides;\n  export let weekNumbers;\n\n  $: weeksFromToday = week => {\n    if (week.weeksFromToday > 0) {\n      return `+${week.weeksFromToday}`;\n    }\n\n    return week.weeksFromToday;\n  };\n</script>\n\n<style>\n  .relative {\n    position: relative;\n  }\n\n  span {\n    font-size: 0.7rem;\n    color: #999;\n  }\n\n  .side-width {\n    width: 20px;\n  }\n\n  .side-width span {\n    position: absolute;\n  }\n\n  .left-side span {\n    left: -36px;\n  }\n\n  .right-side span:first-child {\n    left: 4px;\n  }\n\n  .right-side span:nth-child(2) {\n    left: 24px;\n  }\n</style>\n\n<div aria-label={`${localeFormat(month, 'yyyy')}`} class=\"row\" role=\"row\">\n\n  {#if weekGuides && week.weeksFromToday}\n    <div class=\"relative row side-width left-side\">\n      <span aria-label={`${week.weeksFromToday} weeks from today`}>\n        {weeksFromToday(week)}w\n      </span>\n    </div>\n  {/if}\n\n  <div class=\"row\">\n    {#each week.daysInWeek as day (day.date.toString())}\n      <Day {day} {monthIndicator} {rtl} on:selection on:hover on:apply />\n    {/each}\n  </div>\n  {#if weekNumbers || isoWeekNumbers}\n    <div class=\"relative row side-width right-side\">\n      {#if weekNumbers}\n        <span aria-label={`Week ${week.weekNumber}`}>{week.weekNumber}</span>\n      {/if}\n      {#if isoWeekNumbers}\n        <span aria-label={`Week ${week.isoWeekNumber}`}>\n          i{week.isoWeekNumber}\n        </span>\n      {/if}\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  import { getDaysOfWeek, localeFormat } from \"../utils\";\n\n  export let firstDayOfWeek;\n\n  $: daysOfWeek = getDaysOfWeek(firstDayOfWeek);\n</script>\n\n<style>\n  span {\n    font-size: 0.8rem;\n    color: #999;\n  }\n</style>\n\n<div class=\"row\" role=\"row\">\n  {#each daysOfWeek as dayOfWeek}\n    <span\n      role=\"gridcell\"\n      class=\"calendar-cell\"\n      aria-label={localeFormat(dayOfWeek, 'EEEE')}>\n      {localeFormat(dayOfWeek, 'eeeeee')}\n    </span>\n  {/each}\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import {\n    addMonths,\n    differenceInCalendarMonths,\n    differenceInCalendarYears,\n    isAfter,\n    isBefore,\n    isSameMonth,\n    subMonths,\n    isSameYear,\n    isWithinInterval\n  } from \"date-fns\";\n  import { buildMonths, buildYears, localeFormat } from \"../utils\";\n\n  export let month;\n  export let monthFormat;\n  export let monthDropdown;\n  export let maxDate;\n  export let minDate;\n  export let nextIcon;\n  export let prevIcon;\n  export let yearDropdown;\n\n  const disptachEvent = createEventDispatcher();\n\n  $: selectedMonth = {\n    value: month,\n    text: localeFormat(month, monthFormat)\n  };\n  $: selectedYear = { value: month, text: localeFormat(month, \"yyyy\") };\n  $: prevMonth = subMonths(month, 1);\n  $: nextMonth = addMonths(month, 1);\n  $: isMaxDate = isAfter(month, maxDate) || isSameMonth(month, maxDate);\n  $: isMinDate = isBefore(month, minDate) || isSameMonth(month, minDate);\n  $: months = buildMonths(month, monthFormat);\n  $: years = buildYears(minDate, maxDate);\n  $: nextBtnDisabled = isSameMonth(month, maxDate) || isAfter(month, maxDate);\n  $: prevBtnDisabled = isSameMonth(month, minDate) || isBefore(month, minDate);\n\n  $: isOptionDisabled = mo =>\n    isBefore(mo, minDate) ||\n    (!isSameMonth(mo, minDate) && isAfter(mo, maxDate));\n</script>\n\n<style>\n  div {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n</style>\n\n<div>\n  <button\n    class=\"form-field\"\n    aria-disabled={prevBtnDisabled}\n    disabled={prevBtnDisabled}\n    type=\"button\"\n    on:click={() => disptachEvent('prevMonth')}\n    aria-label={`Previous month, ${localeFormat(prevMonth, 'MMMM yyyy')}`}>\n    {@html prevIcon}\n  </button>\n  <span>\n    {#if monthDropdown}\n      <select\n        class=\"form-field\"\n        bind:value={selectedMonth}\n        on:change={() => disptachEvent('pageChange', {\n            incrementAmount: differenceInCalendarMonths(\n              selectedMonth.value,\n              month\n            )\n          })}>\n        {#each months as mo}\n          <option\n            value={mo}\n            selected={isSameMonth(mo.value, month)}\n            disabled={isOptionDisabled(mo.value)}>\n            {mo.text}\n          </option>\n        {/each}\n      </select>\n    {:else}\n      <small>{localeFormat(month, 'MMMM')}</small>\n    {/if}\n    {#if yearDropdown}\n      <select\n        class=\"form-field\"\n        bind:value={selectedYear}\n        on:change={() => disptachEvent('pageChange', {\n            incrementAmount:\n              differenceInCalendarYears(selectedYear.value, month) * 12\n          })}>\n        {#each years as yr}\n          <option\n            value={yr}\n            selected={isSameYear(yr.value, month)}\n            disabled={isOptionDisabled(yr.value)}>\n            {yr.text}\n          </option>\n        {/each}\n      </select>\n    {:else}\n      <small>{localeFormat(month, 'yyyy')}</small>\n    {/if}\n  </span>\n  <button\n    class=\"form-field\"\n    aria-disabled={nextBtnDisabled}\n    disabled={nextBtnDisabled}\n    type=\"button\"\n    on:click={() => disptachEvent('nextMonth')}\n    aria-label={`Next month, ${localeFormat(nextMonth, 'MMMM yyyy')}`}>\n    {@html nextIcon}\n  </button>\n</div>\n",
    "<script>\n  import { createEventDispatcher } from \"svelte\";\n  import {\n    isSameMonth,\n    isSameDay,\n    startOfWeek,\n    parseISO,\n    endOfWeek\n  } from \"date-fns\";\n  import { localeFormat } from \"../utils\";\n\n  export let day;\n  export let monthIndicator;\n  export let rtl;\n\n  const dispatchEvent = createEventDispatcher();\n\n  const onKeydown = e => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      dispatchEvent(\"apply\");\n    }\n  };\n</script>\n\n<style>\n  div {\n    margin: 2px 0;\n  }\n\n  button {\n    background-color: transparent;\n    border-radius: 100%;\n    outline: 0;\n    border: 0;\n    padding: 0;\n    margin: 0;\n    overflow: hidden;\n  }\n\n  button:focus {\n    box-shadow: 0 0 4px #1565c0;\n  }\n\n  .within-selection,\n  .end-date,\n  .start-date {\n    background-color: #bbdefb;\n  }\n\n  .end-date {\n    border-radius: 0 100% 100% 0;\n  }\n\n  .start-date {\n    border-radius: 100% 0 0 100%;\n  }\n\n  .end-date.start-date {\n    border-radius: 100%;\n  }\n\n  .today {\n    text-decoration: underline;\n  }\n\n  .start-date button,\n  .end-date button,\n  button:not(:disabled):hover {\n    background-color: #1565c0;\n    color: white;\n  }\n\n  .month-indicator {\n    font-size: 0.6rem;\n    top: 4px;\n    position: absolute;\n    opacity: 0;\n  }\n\n  button:not(:disabled):hover .month-indicator,\n  .start-date .month-indicator,\n  .end-date .month-indicator {\n    transition: opacity 460ms ease;\n    opacity: 1;\n  }\n\n  .next-month button,\n  .prev-month button,\n  button:disabled {\n    opacity: 0.6;\n  }\n\n  /* Swap border radius when in rtl */\n  .rtl.end-date {\n    border-radius: 100% 0 0 100%;\n  }\n\n  .rtl.start-date {\n    border-radius: 0 100% 100% 0;\n  }\n</style>\n\n<div\n  role=\"gridcell\"\n  class:rtl\n  class:today={day.isToday}\n  class:weekend={day.isWeekend}\n  class:next-month={day.isNextMonth}\n  class:prev-month={day.isPrevMonth}\n  class:start-date={day.isStartDate}\n  class:end-date={day.isEndDate}\n  class:within-selection={day.isWithinSelection}>\n  <button\n    type=\"button\"\n    aria-label={localeFormat(day.date, 'EEEE, MMMM co, yyyy')}\n    aria-disabled={day.isDisabled}\n    class=\"calendar-cell\"\n    disabled={day.isDisabled}\n    on:keydown={onKeydown}\n    on:click={() => dispatchEvent('selection', day.date)}\n    on:mouseenter={() => dispatchEvent('hover', day.date)}\n    on:focus={() => dispatchEvent('hover', day.date)}>\n    {#if monthIndicator}\n      <span class=\"month-indicator\">{localeFormat(day.date, 'MMM')}</span>\n    {/if}\n    {localeFormat(day.date, 'd')}\n  </button>\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}